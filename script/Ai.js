const gojo = process.env.GOOGLE_API_KEY; // Clé API stockée en variable d'environnement const messie = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${gojo}`; const axios = require('axios'); // Importation explicite d'axios module.exports.config = { // ... (configuration inchangée) }; module.exports.run = async function ({ api, event }) { const body = event.body || ""; const triggerWords = ["ai", "davbot"]; const matched = triggerWords.some(word => body.toLowerCase().startsWith(word)); if (!matched) return; const question = body.replace(/^(ai|Davbot)/i, "").trim(); if (!question) { // ... (message inchangé) } const predefinedResponses = [ // ... (réponses inchangées) ]; const isCreationQuestion = /^(créé|créateur|origine|qui t'a créé)/i.test(question); try { const corps = { contents: [{ role: "user", parts: [{ text: question }] }], systemInstruction: { role: "system", parts: [{ text: isCreationQuestion ? "Répondre avec une phrase aléatoire parmi les suivantes :" : "" }] } }; const réponse = await axios.post(messie, corps, { headers: { 'Content-Type': 'application/json' } }); const texte = réponse.data?.candidates?.[0]?.content?.parts?.[0]?.text || "Aucune réponse générée."; const finalResponse = isCreationQuestion ? predefinedResponses[Math.floor(Math.random() * predefinedResponses.length)] : texte; return api.sendMessage( `𝑫𝒂𝒗𝒃𝒐𝒕 ✰\n_______________________________\n${finalResponse}\n________________________`, event.threadID, event.messageID ); } catch (erreur) { console.error("Erreur Gemini API:", erreur); // Message d'erreur plus informatif return api.sendMessage( '𝑫𝒂𝒗𝒃𝒐𝒕 ✰\n_______________________________\nUne erreur est survenue en contactant Gemini API.\nVeuillez réessayer plus tard.\n________________________', event.threadID, event.messageID ); } }; 
